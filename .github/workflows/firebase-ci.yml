name: Firebase Functions CI

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]
    paths:
      - "apps/functions/**"
      - "firebase.json"
      - ".firebaserc"
      - ".github/workflows/firebase-ci.yml"

jobs:
  deploy-functions:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: ">= 472.0.0"

      - name: Confirm project
        run: |
          echo "Using project: ${FIREBASE_PROJECT_ID}"
          gcloud config set project "${FIREBASE_PROJECT_ID}"
          gcloud projects describe "${FIREBASE_PROJECT_ID}" --format='value(projectNumber)'

      - name: Enable required APIs (idempotent)
        run: |
          gcloud services enable \
            cloudfunctions.googleapis.com \
            run.googleapis.com \
            cloudbuild.googleapis.com \
            artifactregistry.googleapis.com \
            firebase.googleapis.com \
            firebaseextensions.googleapis.com \
            servicemanagement.googleapis.com \
            serviceusage.googleapis.com \
            cloudresourcemanager.googleapis.com \
            runtimeconfig.googleapis.com \
            eventarc.googleapis.com \
            pubsub.googleapis.com \
            storage.googleapis.com

      - name: Install Firebase CLI
        run: npm i -g firebase-tools@latest

      - name: Firebase auth check
        run: firebase --project "${FIREBASE_PROJECT_ID}" projects:list >/dev/null

      - name: Install function deps
        working-directory: apps/functions
        run: npm ci || npm install

      - name: Sanity check Firebase config
        run: |
          test -f firebase.json && cat firebase.json
          test -f .firebaserc && cat .firebaserc

      # Optional: non-blocking SDK config check (safe if no Web App ID is set)
      - name: Check Firebase Web App SDK config (non-blocking)
        run: |
          set -euo pipefail
          echo "Checking Firebase adminSdkConfig (non-blocking)..."
          APP_ID="$(firebase --project "${FIREBASE_PROJECT_ID}" apps:list | awk '/WEB/ {print $2; exit}' || true)"
          if [ -z "${APP_ID:-}" ]; then
            echo "No Web App found. Skipping sdkconfig check."
          else
            echo "Found Web App: ${APP_ID}"
            firebase --project "${FIREBASE_PROJECT_ID}" apps:sdkconfig web "${APP_ID}" >/dev/null || \
              echo "sdkconfig fetch failed, continuing."
          fi

      - name: Deploy functions (gen2) with cleanup policy
        run: firebase deploy --only functions --project "${FIREBASE_PROJECT_ID}" --non-interactive --force

      - name: Output function URLs
        run: gcloud functions list --region=us-central1 --format="table(name, httpsTrigger.url)"
